// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  // password      String
  username      String        @unique
  // firstName     String
  // lastName      String
  avatar        String?
  googleId      String?       @unique
  createdAt     DateTime      @default(now())
  characters    Character[]   @relation("UserCharacters")
  sessions      ChatSession[]
  isVerified    Boolean       @default(false)
  refreshToken  String?
  name          String
  emailVerified Boolean       @default(false)
  image         String?
  updatedAt     DateTime      @updatedAt
  accounts      Account[]

  Session         Session[]
  displayUsername String?
  personas        UserPersona[] @relation("UserToUserPersona")

  Favorites         Favorites[]
  CharacterShowcase CharacterShowcase[]
  PersonaShowcase   PersonaShowcase[]
  role              String?
  banned            Boolean?
  banReason         String?
  banExpires        DateTime?

  @@map("user")
  UserDetails UserDetails[] @relation(name: "UserToUserDetails")
  UserRequest UserRequest[]
}

model UserDetails{
  id          String   @id @default(uuid())
  userId      String   @unique
  bio         String?
  personality String?
  currentPersonaId String?
  userPersona UserPersona? @relation(fields: [currentPersonaId], references: [id], name: "UserToCurrentUserPersona")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], name: "UserToUserDetails")
}

model UserRequest {
  id          String   @id @default(uuid())
  userId      String
  characterId String
  status      RequestStatus   @default(PENDING)
  user        User     @relation(fields: [userId], references: [id])
  character   Character @relation(fields: [characterId], references: [id])
  adminNote String? 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model Character {
  id               String   @id @default(uuid())
  name             String
  personality      String
  description      String
  environment      String?
  avatar           String?
  additionalInfo   String?
  tags             String[] // new: for filtering (e.g., "fantasy", "romance", "villain")
  // new: additional information like "loves cats", "hates coffee"
  backstory        String? // new: background story of the character
  role             String? // new: e.g., "Cyberpunk Hacker", "Fantasy Mage"
  goals            String? // new: motivations and current objectives
  quirks           String? // new: small character details like "hates water" or "says 'yo' every sentence"
  tone             String? // new: "friendly", "formal", etc.
  speechStyle      String? // new: "speaks in riddles", "like Shakespeare", etc.
  exampleDialogues Json? // new: array of user-AI sample dialogues for few-shot prompting

  owner     User          @relation(fields: [ownerId], references: [id], name: "UserCharacters")
  sessions  ChatSession[]
  ownerId   String
  isPublic  Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  Favorites Favorites[]

  CharacterShowcase CharacterShowcase[]

  UserRequest UserRequest[]
}

model ChatSession {
  id            String        @id @default(uuid())
  userId        String
  characterId   String
  environment   String?
  user          User          @relation(fields: [userId], references: [id])
  userpersonaId String?
  userpersona   UserPersona?  @relation(fields: [userpersonaId], references: [id])
  character     Character     @relation(fields: [characterId], references: [id])
  messages      ChatMessage[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isPublic      Boolean       @default(false)
  title         String?
}

model UserPersona {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String
  avatar      String?
  personality String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], name: "UserToUserPersona")

  isPublic  Boolean @default(false)
  backstory String? // new: background story of the persona

  ChatSession ChatSession[]

  PersonaShowcase PersonaShowcase[]

  UserDetails UserDetails[] @relation(name: "UserToCurrentUserPersona")
}

model ChatMessage {
  id        String      @id @default(uuid())
  sessionId String
  content   String
  role      MessageRole
  createdAt DateTime    @default(now())
  session   ChatSession @relation(fields: [sessionId], references: [id])
}

enum MessageRole {
  USER
  AI
  SYSTEM
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Favorites {
  id          String    @id @default(uuid())
  userId      String
  characterId String
  user        User      @relation(fields: [userId], references: [id])
  character   Character @relation(fields: [characterId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, characterId])
}

model CharacterShowcase {
  id          String    @id @default(uuid())
  addedBy     String
  characterId String
  isActive    Boolean   @default(true)
  user        User      @relation(fields: [addedBy], references: [id])
  character   Character @relation(fields: [characterId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([addedBy, characterId])
}

model PersonaShowcase {
  id        String      @id @default(uuid())
  addedBy   String
  personaId String
  isActive  Boolean     @default(true)
  user      User        @relation(fields: [addedBy], references: [id])
  persona   UserPersona @relation(fields: [personaId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([addedBy, personaId])
}

model GuestSession {
  id           String   @id @default(uuid())
  guestToken   String?   
  createdAt    DateTime @default(now())
  messageCount Int      @default(0)
  lastUsed     DateTime @updatedAt
}

